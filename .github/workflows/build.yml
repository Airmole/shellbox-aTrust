# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build Application

on:
  workflow_dispatch:
  push:
    branches:
      - master

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: docker-atrust-autologin

jobs:
  build-docker-x64:
    runs-on: ubuntu-24.04
    name: Build Linux x64 Docker Image
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: submodules-init
        uses: snickerbockers/submodules-init@v4

      - name: Run Docker Prebuild shell
        run: |
          echo "Prebuild shell"
          ls -al
          mkdir -p ./build/output || true
          ls -al ./build/output

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set Up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set Up Cache
        uses: actions/cache@v2
        id: buildx-cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx

      - name: Buildx
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest-x64

  build-docker-aarch64:
    runs-on: ubuntu-24.04
    name: Build Linux aarch64 Docker Image
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: submodules-init
        uses: snickerbockers/submodules-init@v4

      - name: Run Docker Prebuild shell
        run: |
          echo "Prebuild shell"
          ls -al
          mkdir -p ./build/output || true
          ls -al ./build/output

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set Up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set Up Cache
        uses: actions/cache@v2
        id: buildx-cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx

      - name: Buildx
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest-aarch64

  docker-manifest:
    runs-on: ubuntu-20.04
    name: Docker Manifest
    needs: [ build-docker-x64, build-docker-aarch64 ]
    steps:
      - name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Run Docker Manifest shell
        run: |
          echo "Docker Manifest shell"
          docker manifest create --insecure ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest-x64 ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest-aarch64
          docker manifest annotate ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest-x64 --os linux --arch amd64
          docker manifest annotate ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest-aarch64 --os linux --arch arm --variant v8
          
          docker manifest push -p --insecure ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest